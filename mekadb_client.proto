syntax = "proto3";

option java_multiple_files = true;
option java_package = "app.hypi.mekadb.client";
option java_outer_classname = "MekaDBClientWrapper";

package mekadb;

service MekaDB {
  //Log into a database to obtain an authentication context that can be used to execute SQL queries
  rpc authenticate(AuthReq)returns(AuthCtx){}
  //Executes the SQL query given and returns a JSON array response as a string.
  //The JSON array contains objects where each key is the name of the column, lowercased.
  //For example a table with the columns username, Age and CITY will return
  //[{"username":"Courtney","age":1,"city":"San Francisco"}]
  //i.e. the column names are lower cased, the values are the original as inserted into the table
  //If there are no results, the string returned will always be "[]"
  //i.e. you can always parse the string and assume there is a JSON array but it can be an empty array
  rpc sql_query(SqlRequest) returns(SqlResponse){}
  rpc information_schema(InfoRequest) returns(InfoResponse){}
  // switched from streaming - a lot of added complexity in detecting errors, killed connections and so on
  //also no apparent significant benefit for the cost of the added complexity - https://stackoverflow.com/a/56774950/400048 and https://nshnt.medium.com/using-grpc-streams-for-unary-calls-cd64a1638c8a
  //  rpc SqlWithJsonResponse(stream SqlRequest) returns(stream SqlResponse){}
}

message AuthReq {
  string tenant = 1;
  //The database that the given user has access to and to which the returned AuthCtx will be bound
  string catalog = 2;
  //The username of a user that exists for the given database
  string username = 3;
  //The password of the username provided
  string password = 4;
  //The schema that the given user has access and to which the returned context will be bound, the tables queried must exist in this schema
  optional string schema = 5;
}

message AuthCtx {
  string tenant = 1;
  //The name of the database to execute the query against
  string catalog = 2;
  //The schema within the database that we should execute the query against
  string schema = 3;
  //Unique to the user, database, schema combination that was used to obtain the context
  string token = 4;
  int32 token_system_version = 5;
}

message SqlRequest {
  int64 request_id = 1;
  AuthCtx auth = 2;
  //The SQL query to execute
  string query = 3;
  oneof params {
    NumericQueryPlaceholder numeric = 4;
    NamedQueryPlaceHolder named = 5;
  }
}

message PlaceholderValue {
  oneof data {
    int32 i32_t = 1;
    int64 i64_t = 2;
    float float_t = 3;
    double double_t = 4;
    bool bool_t = 5;
    string str_t = 6;
    //Binary data - note that no filtering can be done on binary data
    bytes binary_t = 7;
    //A timestamp representing the number of milliseconds since 01-01-1970 UTC
    int64 timestamp_millis = 8;
  }
}
message NumericQueryPlaceholder {
  repeated PlaceholderValue value = 1;
}

message PlaceholderPair {
  string name = 1;
  PlaceholderValue value = 2;
}

message NamedQueryPlaceHolder {
  repeated PlaceholderPair values = 1;
}

message SqlResponse {
  int64 request_id = 1;
  oneof payload {
    string response = 2;
    SqlResponseError error = 3;
  }
}

message SqlResponseError {
  int32 code = 1;
  string message = 2;
}

message InfoRequest {
  int64 request_id = 1;
  //Requests that MekaDB provides the info schema for the catalog and schema in this token
  AuthCtx auth = 2;
}

message InfoResponse {
  int64 request_id = 1;
  oneof payload {
    InfoCatalog catalog = 2;
    SqlResponseError error = 3;
  }
}

message InfoCatalog {
  int64 tenant_id = 1;
  int64 id = 2;
  string name = 3;
  repeated InfoSchema schemas = 4;
}

message InfoSchema {
  int64 tenant_id = 1;
  int64 catalog_id = 2;
  string catalog_name = 3;
  int64 id = 4;
  string name = 5;
  repeated InfoTable tables = 6;
}

message InfoTable {
  int64 tenant_id = 1;
  int64 catalog_id = 2;
  string catalog_name = 3;
  int64 schema_id = 4;
  string schema_name = 5;
  int64 id = 6;
  string name = 7;
  repeated InfoConstraint constraints = 8;
  repeated InfoColumn columns = 9;
}

message InfoColumn {
  int64 tenant_id = 1;
  int64 catalog_id = 2;
  string catalog_name = 3;
  int64 schema_id = 4;
  string schema_name = 5;
  int64 table_id = 6;
  string table_name = 7;
  string name = 8;
  string target = 9;
  string type = 10;
  bool nullable = 11;
}

message InfoConstraint {
  int64 tenant_id = 1;
  int64 catalog_id = 2;
  string catalog_name = 3;
  int64 schema_id = 4;
  string schema_name = 5;
  int64 table_id = 6;
  string table_name = 7;
  string name = 8;
  int64 source_table = 9;
  int64 source_column = 10;
  int64 target_table = 11;
  int64 target_column = 12;
  InfoConstraintAction on_delete = 13;
  InfoConstraintAction on_update = 14;
}

enum InfoConstraintAction{
  Cascade = 0;
  Restrict = 1;
  NoAction = 2;
  SetNull = 3;
  SetDefault = 4;
}
